#!/usr/bin/env node

'use strict';

var di = require(__dirname + '/../bootstrap')('frontend')
    , app = require('../app_front')
    , debug = require('debug')('frontend:server')
    , http = require('http')
    , async = require('async')
    , port = normalizePort(process.env.PORT || '3001')
    ;

app.set('port', port);

var server = http.createServer(app),
    io = require('socket.io')(server)
;

server.on('error', onError);
server.on('listening', onListening);

io.on('connection', function (socket) {
    socket.emit('hello', {foo: 'bar'});
});

// server setup
async.waterfall([
    function (next) {
        di.get('rabbit_mq').connect(next);
    },
    function (next) {
        di.get('candlestick_subscriber').init(io, next);
    }
], function (err) {
    if (err) {
        console.error(err.message);
        process.exit(1);
    }

    server.listen(port);
});

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
